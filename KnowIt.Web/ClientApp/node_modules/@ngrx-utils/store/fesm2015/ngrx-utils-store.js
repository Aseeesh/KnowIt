import { Directive, ViewContainerRef, TemplateRef, Input, NgModule, ContentChildren, ɵstringify, WrappedValue, ɵisPromise, ɵisObservable, Pipe, ChangeDetectorRef } from '@angular/core';
import { NavigationEnd, Router, RouterLink, RouterLinkWithHref } from '@angular/router';
import { Observable } from 'rxjs';
import { takeUntil, pluck as pluck$1 } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ngLet.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgLetContext {
    constructor() {
        this.$implicit = null;
        this.ngLet = null;
    }
}
if (false) {
    /** @type {?} */
    NgLetContext.prototype.$implicit;
    /** @type {?} */
    NgLetContext.prototype.ngLet;
}
class NgLetDirective {
    /**
     * @param {?} _vcr
     * @param {?} _templateRef
     */
    constructor(_vcr, _templateRef) {
        this._vcr = _vcr;
        this._templateRef = _templateRef;
        this._context = new NgLetContext();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ngLet(value) {
        this._context.$implicit = this._context.ngLet = value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._vcr.createEmbeddedView(this._templateRef, this._context);
    }
}
NgLetDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngLet]',
            },] }
];
/** @nocollapse */
NgLetDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef }
];
NgLetDirective.propDecorators = {
    ngLet: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgLetDirective.prototype._context;
    /**
     * @type {?}
     * @private
     */
    NgLetDirective.prototype._vcr;
    /**
     * @type {?}
     * @private
     */
    NgLetDirective.prototype._templateRef;
}
class NgLetModule {
}
NgLetModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgLetDirective],
                exports: [NgLetDirective],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/operators/untilDestroy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// create a symbol identify the observable I add to
// the component so it doesn't conflict with anything.
// I need this so I'm able to add the desired behaviour to the component.
/** @type {?} */
const destroy$ = Symbol('destroy$');
/**
 * An operator that takes until destroy it takes a components this a parameter
 * returns a pipeable RxJS operator.
 * @type {?}
 */
const untilDestroy = (/**
 * @template T
 * @param {?} component
 * @return {?}
 */
(component) => {
    /** @type {?} */
    const orignalDestroy = component.ngOnDestroy;
    if (orignalDestroy == null) {
        // Angular does not support dynamic added destroy methods
        // so make sure there is one.
        throw new Error('untilDestroy operator needs the component to have an ngOnDestroy method');
    }
    if (component[destroy$] === undefined) {
        // only hookup each component once.
        addDestroyObservableToComponent(component);
    }
    // pipe in the takeUntil destroy$ and return the source unaltered
    return takeUntil(component[destroy$]);
});
/**
 * \@internal
 * @param {?} component
 * @return {?}
 */
function addDestroyObservableToComponent(component) {
    component[destroy$] = new Observable((/**
     * @param {?} observer
     * @return {?}
     */
    (observer) => {
        // keep track of the original destroy function,
        // the user might do something in there
        /** @type {?} */
        const orignalDestroy = component.ngOnDestroy;
        // replace the ngOndestroy
        component.ngOnDestroy = (/**
         * @return {?}
         */
        () => {
            // fire off the destroy observable
            observer.next();
            // complete the observable
            observer.complete();
            // and at last, call the original destroy
            orignalDestroy.call(component);
        });
        // return cleanup function.
        return (/**
         * @param {?} _
         * @return {?}
         */
        (_) => (component[destroy$] = undefined));
    }));
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/operators/pluck.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T, V
 * @param {...?} props
 * @return {?}
 */
function pluck(...props) {
    return pluck$1(...props);
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/operators/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/routerLinkMatch.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function MatchExp() { }
/**
 * This directive will give you ability to add a class to the element
 * when router url match a regular expression.
 * The syntax is same with ngClass but replace the true/false expression
 * with your string based regexp (like the string you pass to new RegExp(''))
 *
 * \@example
 * Example: active-class will be added to a tag when router URL
 * contains this segment: products/12345
 *
 * ```html
 * <a routerLink="/products"
 *  [routerLinkMatch]="{
 *    "active-class": "products/\\d+"
 *  }"></a>
 * ```
 */
class RouterLinkMatch {
    /**
     * @param {?} router
     * @param {?} _renderer
     * @param {?} _ngEl
     */
    constructor(router, _renderer, _ngEl) {
        this.router = router;
        this._renderer = _renderer;
        this._ngEl = _ngEl;
        router.events.pipe(untilDestroy(this)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e instanceof NavigationEnd) {
                this._curRoute = ((/** @type {?} */ (e))).urlAfterRedirects;
                this._update();
            }
        }));
    }
    /**
     * @param {?} matchExp
     * @return {?}
     */
    set routerLinkMatch(matchExp) {
        if (matchExp && typeof matchExp === 'object') {
            this._matchExp = matchExp;
        }
        else {
            throw new TypeError(`Unexpected type '${typeof matchExp}' of value for ` +
                `input of routerLinkMatch directive, expected 'object'`);
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this._update();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.links.changes.pipe(untilDestroy(this)).subscribe((/**
         * @return {?}
         */
        () => this._update()));
        this.linksWithHrefs.changes
            .pipe(untilDestroy(this))
            .subscribe((/**
         * @return {?}
         */
        () => this._update()));
        this._update();
    }
    /**
     * @private
     * @return {?}
     */
    _update() {
        if (!this.links || !this.linksWithHrefs || !this.router.navigated) {
            return;
        }
        /**
         * This a way of causing something to happen in the next micro-task / during a new round
         * of change detection.
         */
        Promise.resolve().then((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const matchExp = this._matchExp;
            for (const classes of Object.keys(matchExp)) {
                if (matchExp[classes] && typeof matchExp[classes] === 'string') {
                    /** @type {?} */
                    const regexp = new RegExp(matchExp[classes]);
                    if (this._curRoute.match(regexp)) {
                        this._toggleClass(classes, true);
                    }
                    else {
                        this._toggleClass(classes, false);
                    }
                }
            }
        }));
    }
    /**
     * @private
     * @param {?} classes
     * @param {?} enabled
     * @return {?}
     */
    _toggleClass(classes, enabled) {
        classes
            .split(/\s+/g)
            .filter((/**
         * @param {?} cls
         * @return {?}
         */
        (cls) => !!cls))
            .forEach((/**
         * @param {?} cls
         * @return {?}
         */
        (cls) => {
            if (enabled) {
                this._renderer.addClass(this._ngEl.nativeElement, cls);
            }
            else {
                this._renderer.removeClass(this._ngEl.nativeElement, cls);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
}
RouterLinkMatch.decorators = [
    { type: Directive, args: [{
                selector: '[routerLinkMatch]',
            },] }
];
/** @nocollapse */
RouterLinkMatch.ctorParameters = () => [
    { type: Router },
    { type: Renderer2 },
    { type: ElementRef }
];
RouterLinkMatch.propDecorators = {
    links: [{ type: ContentChildren, args: [RouterLink, { descendants: true },] }],
    linksWithHrefs: [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] }],
    routerLinkMatch: [{ type: Input, args: ['routerLinkMatch',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._curRoute;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._matchExp;
    /** @type {?} */
    RouterLinkMatch.prototype.links;
    /** @type {?} */
    RouterLinkMatch.prototype.linksWithHrefs;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype.router;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._ngEl;
}
class RouterLinkMatchModule {
}
RouterLinkMatchModule.decorators = [
    { type: NgModule, args: [{
                declarations: [RouterLinkMatch],
                exports: [RouterLinkMatch],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/push.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} type
 * @param {?} value
 * @return {?}
 */
function invalidPipeArgumentError(type, value) {
    return Error(`InvalidPipeArgument: '${value}' for pipe '${ɵstringify(type)}'`);
}
/**
 * @record
 */
function SubscriptionStrategy() { }
if (false) {
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    SubscriptionStrategy.prototype.createSubscription = function (async, updateLatestValue) { };
    /**
     * @param {?} subscription
     * @return {?}
     */
    SubscriptionStrategy.prototype.dispose = function (subscription) { };
}
class ObservableStrategy {
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    createSubscription(async, updateLatestValue) {
        return async.subscribe({
            next: updateLatestValue,
            error: (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                throw e;
            }),
        });
    }
    /**
     * @param {?} subscription
     * @return {?}
     */
    dispose(subscription) {
        subscription.unsubscribe();
    }
}
class PromiseStrategy {
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    createSubscription(async, updateLatestValue) {
        return async.then(updateLatestValue, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            throw e;
        }));
    }
    /**
     * @param {?} subscription
     * @return {?}
     */
    dispose(subscription) { }
}
/** @type {?} */
const _promiseStrategy = new PromiseStrategy();
/** @type {?} */
const _observableStrategy = new ObservableStrategy();
/**
 * \@ngModule PushPipeModule
 * \@description
 *
 * Unwraps a value from an asynchronous primitive.
 *
 * The `push` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
 * emitted. When a new value is emitted, the `push` pipe will run change detection and it works
 * even when `zone` has been disabled. When the component gets destroyed,
 * the `push` pipe unsubscribes automatically to avoid potential memory leaks.
 *
 */
class PushPipe {
    /**
     * @param {?} _ref
     */
    constructor(_ref) {
        this._ref = _ref;
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
        this._strategy = (/** @type {?} */ (null));
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    transform(obj) {
        if (this._obj === null) {
            if (obj != null) {
                this._subscribe(obj);
            }
            this._latestReturnedValue = this._latestValue;
            return this._latestValue;
        }
        if (obj !== this._obj) {
            this._dispose();
            return this.transform((/** @type {?} */ (obj)));
        }
        if (this._latestValue === this._latestReturnedValue) {
            return this._latestReturnedValue;
        }
        this._latestReturnedValue = this._latestValue;
        return WrappedValue.wrap(this._latestValue);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._subscription !== null) {
            this._dispose();
        }
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    _subscribe(obj) {
        this._obj = obj;
        this._strategy = this._selectStrategy(obj);
        this._subscription = this._strategy.createSubscription(obj, (/**
         * @param {?} value
         * @return {?}
         */
        (value) => this._updateLatestValue(obj, value)));
    }
    /**
     * @private
     * @return {?}
     */
    _dispose() {
        this._strategy.dispose((/** @type {?} */ (this._subscription)));
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    _selectStrategy(obj) {
        if (ɵisPromise(obj)) {
            return _promiseStrategy;
        }
        if (ɵisObservable(obj)) {
            return _observableStrategy;
        }
        throw invalidPipeArgumentError(PushPipe, obj);
    }
    /**
     * @private
     * @param {?} async
     * @param {?} value
     * @return {?}
     */
    _updateLatestValue(async, value) {
        if (async === this._obj) {
            this._latestValue = value;
            this._ref.detectChanges();
        }
    }
}
PushPipe.decorators = [
    { type: Pipe, args: [{ name: 'push', pure: false },] }
];
/** @nocollapse */
PushPipe.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PushPipe.prototype._latestValue;
    /**
     * @type {?}
     * @private
     */
    PushPipe.prototype._latestReturnedValue;
    /**
     * @type {?}
     * @private
     */
    PushPipe.prototype._subscription;
    /**
     * @type {?}
     * @private
     */
    PushPipe.prototype._obj;
    /**
     * @type {?}
     * @private
     */
    PushPipe.prototype._strategy;
    /**
     * @type {?}
     * @private
     */
    PushPipe.prototype._ref;
}
class PushPipeModule {
}
PushPipeModule.decorators = [
    { type: NgModule, args: [{
                exports: [PushPipe],
                declarations: [PushPipe],
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/store.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngrx-utils-store.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgLetContext, NgLetDirective, NgLetModule, PushPipe, PushPipeModule, RouterLinkMatch, RouterLinkMatchModule, invalidPipeArgumentError, pluck, untilDestroy, destroy$ as ɵdestroy$ };
//# sourceMappingURL=ngrx-utils-store.js.map
