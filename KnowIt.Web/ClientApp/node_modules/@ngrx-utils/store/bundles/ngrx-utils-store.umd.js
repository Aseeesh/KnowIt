(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ngrx-utils/store', ['exports', '@angular/core', '@angular/router', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['ngrx-utils'] = global['ngrx-utils'] || {}, global['ngrx-utils'].store = {}), global.ng.core, global.ng.router, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, router, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/directives/ngLet.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgLetContext = /** @class */ (function () {
        function NgLetContext() {
            this.$implicit = null;
            this.ngLet = null;
        }
        return NgLetContext;
    }());
    if (false) {
        /** @type {?} */
        NgLetContext.prototype.$implicit;
        /** @type {?} */
        NgLetContext.prototype.ngLet;
    }
    var NgLetDirective = /** @class */ (function () {
        function NgLetDirective(_vcr, _templateRef) {
            this._vcr = _vcr;
            this._templateRef = _templateRef;
            this._context = new NgLetContext();
        }
        Object.defineProperty(NgLetDirective.prototype, "ngLet", {
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._context.$implicit = this._context.ngLet = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        NgLetDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this._vcr.createEmbeddedView(this._templateRef, this._context);
        };
        NgLetDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngLet]',
                    },] }
        ];
        /** @nocollapse */
        NgLetDirective.ctorParameters = function () { return [
            { type: core.ViewContainerRef },
            { type: core.TemplateRef }
        ]; };
        NgLetDirective.propDecorators = {
            ngLet: [{ type: core.Input }]
        };
        return NgLetDirective;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        NgLetDirective.prototype._context;
        /**
         * @type {?}
         * @private
         */
        NgLetDirective.prototype._vcr;
        /**
         * @type {?}
         * @private
         */
        NgLetDirective.prototype._templateRef;
    }
    var NgLetModule = /** @class */ (function () {
        function NgLetModule() {
        }
        NgLetModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgLetDirective],
                        exports: [NgLetDirective],
                    },] }
        ];
        return NgLetModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/operators/untilDestroy.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // create a symbol identify the observable I add to
    // the component so it doesn't conflict with anything.
    // I need this so I'm able to add the desired behaviour to the component.
    /** @type {?} */
    var destroy$ = Symbol('destroy$');
    /**
     * An operator that takes until destroy it takes a components this a parameter
     * returns a pipeable RxJS operator.
     * @type {?}
     */
    var untilDestroy = (/**
     * @template T
     * @param {?} component
     * @return {?}
     */
    function (component) {
        /** @type {?} */
        var orignalDestroy = component.ngOnDestroy;
        if (orignalDestroy == null) {
            // Angular does not support dynamic added destroy methods
            // so make sure there is one.
            throw new Error('untilDestroy operator needs the component to have an ngOnDestroy method');
        }
        if (component[destroy$] === undefined) {
            // only hookup each component once.
            addDestroyObservableToComponent(component);
        }
        // pipe in the takeUntil destroy$ and return the source unaltered
        return operators.takeUntil(component[destroy$]);
    });
    /**
     * \@internal
     * @param {?} component
     * @return {?}
     */
    function addDestroyObservableToComponent(component) {
        component[destroy$] = new rxjs.Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            // keep track of the original destroy function,
            // the user might do something in there
            /** @type {?} */
            var orignalDestroy = component.ngOnDestroy;
            // replace the ngOndestroy
            component.ngOnDestroy = (/**
             * @return {?}
             */
            function () {
                // fire off the destroy observable
                observer.next();
                // complete the observable
                observer.complete();
                // and at last, call the original destroy
                orignalDestroy.call(component);
            });
            // return cleanup function.
            return (/**
             * @param {?} _
             * @return {?}
             */
            function (_) { return (component[destroy$] = undefined); });
        }));
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/operators/pluck.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T, V
     * @param {...?} props
     * @return {?}
     */
    function pluck() {
        var props = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            props[_i] = arguments[_i];
        }
        return operators.pluck.apply(void 0, __spread(props));
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/operators/index.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/directives/routerLinkMatch.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function MatchExp() { }
    /**
     * This directive will give you ability to add a class to the element
     * when router url match a regular expression.
     * The syntax is same with ngClass but replace the true/false expression
     * with your string based regexp (like the string you pass to new RegExp(''))
     *
     * \@example
     * Example: active-class will be added to a tag when router URL
     * contains this segment: products/12345
     *
     * ```html
     * <a routerLink="/products"
     *  [routerLinkMatch]="{
     *    "active-class": "products/\\d+"
     *  }"></a>
     * ```
     */
    var RouterLinkMatch = /** @class */ (function () {
        function RouterLinkMatch(router$1, _renderer, _ngEl) {
            var _this = this;
            this.router = router$1;
            this._renderer = _renderer;
            this._ngEl = _ngEl;
            router$1.events.pipe(untilDestroy(this)).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e instanceof router.NavigationEnd) {
                    _this._curRoute = ((/** @type {?} */ (e))).urlAfterRedirects;
                    _this._update();
                }
            }));
        }
        Object.defineProperty(RouterLinkMatch.prototype, "routerLinkMatch", {
            set: /**
             * @param {?} matchExp
             * @return {?}
             */
            function (matchExp) {
                if (matchExp && typeof matchExp === 'object') {
                    this._matchExp = matchExp;
                }
                else {
                    throw new TypeError("Unexpected type '" + typeof matchExp + "' of value for " +
                        "input of routerLinkMatch directive, expected 'object'");
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        RouterLinkMatch.prototype.ngOnChanges = /**
         * @return {?}
         */
        function () {
            this._update();
        };
        /**
         * @return {?}
         */
        RouterLinkMatch.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.links.changes.pipe(untilDestroy(this)).subscribe((/**
             * @return {?}
             */
            function () { return _this._update(); }));
            this.linksWithHrefs.changes
                .pipe(untilDestroy(this))
                .subscribe((/**
             * @return {?}
             */
            function () { return _this._update(); }));
            this._update();
        };
        /**
         * @private
         * @return {?}
         */
        RouterLinkMatch.prototype._update = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.links || !this.linksWithHrefs || !this.router.navigated) {
                return;
            }
            /**
             * This a way of causing something to happen in the next micro-task / during a new round
             * of change detection.
             */
            Promise.resolve().then((/**
             * @return {?}
             */
            function () {
                var e_1, _a;
                /** @type {?} */
                var matchExp = _this._matchExp;
                try {
                    for (var _b = __values(Object.keys(matchExp)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var classes = _c.value;
                        if (matchExp[classes] && typeof matchExp[classes] === 'string') {
                            /** @type {?} */
                            var regexp = new RegExp(matchExp[classes]);
                            if (_this._curRoute.match(regexp)) {
                                _this._toggleClass(classes, true);
                            }
                            else {
                                _this._toggleClass(classes, false);
                            }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }));
        };
        /**
         * @private
         * @param {?} classes
         * @param {?} enabled
         * @return {?}
         */
        RouterLinkMatch.prototype._toggleClass = /**
         * @private
         * @param {?} classes
         * @param {?} enabled
         * @return {?}
         */
        function (classes, enabled) {
            var _this = this;
            classes
                .split(/\s+/g)
                .filter((/**
             * @param {?} cls
             * @return {?}
             */
            function (cls) { return !!cls; }))
                .forEach((/**
             * @param {?} cls
             * @return {?}
             */
            function (cls) {
                if (enabled) {
                    _this._renderer.addClass(_this._ngEl.nativeElement, cls);
                }
                else {
                    _this._renderer.removeClass(_this._ngEl.nativeElement, cls);
                }
            }));
        };
        /**
         * @return {?}
         */
        RouterLinkMatch.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () { };
        RouterLinkMatch.decorators = [
            { type: core.Directive, args: [{
                        selector: '[routerLinkMatch]',
                    },] }
        ];
        /** @nocollapse */
        RouterLinkMatch.ctorParameters = function () { return [
            { type: router.Router },
            { type: Renderer2 },
            { type: ElementRef }
        ]; };
        RouterLinkMatch.propDecorators = {
            links: [{ type: core.ContentChildren, args: [router.RouterLink, { descendants: true },] }],
            linksWithHrefs: [{ type: core.ContentChildren, args: [router.RouterLinkWithHref, { descendants: true },] }],
            routerLinkMatch: [{ type: core.Input, args: ['routerLinkMatch',] }]
        };
        return RouterLinkMatch;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        RouterLinkMatch.prototype._curRoute;
        /**
         * @type {?}
         * @private
         */
        RouterLinkMatch.prototype._matchExp;
        /** @type {?} */
        RouterLinkMatch.prototype.links;
        /** @type {?} */
        RouterLinkMatch.prototype.linksWithHrefs;
        /**
         * @type {?}
         * @private
         */
        RouterLinkMatch.prototype.router;
        /**
         * @type {?}
         * @private
         */
        RouterLinkMatch.prototype._renderer;
        /**
         * @type {?}
         * @private
         */
        RouterLinkMatch.prototype._ngEl;
    }
    var RouterLinkMatchModule = /** @class */ (function () {
        function RouterLinkMatchModule() {
        }
        RouterLinkMatchModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [RouterLinkMatch],
                        exports: [RouterLinkMatch],
                    },] }
        ];
        return RouterLinkMatchModule;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/directives/index.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/pipes/push.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} type
     * @param {?} value
     * @return {?}
     */
    function invalidPipeArgumentError(type, value) {
        return Error("InvalidPipeArgument: '" + value + "' for pipe '" + core["ɵstringify"](type) + "'");
    }
    /**
     * @record
     */
    function SubscriptionStrategy() { }
    if (false) {
        /**
         * @param {?} async
         * @param {?} updateLatestValue
         * @return {?}
         */
        SubscriptionStrategy.prototype.createSubscription = function (async, updateLatestValue) { };
        /**
         * @param {?} subscription
         * @return {?}
         */
        SubscriptionStrategy.prototype.dispose = function (subscription) { };
    }
    var ObservableStrategy = /** @class */ (function () {
        function ObservableStrategy() {
        }
        /**
         * @param {?} async
         * @param {?} updateLatestValue
         * @return {?}
         */
        ObservableStrategy.prototype.createSubscription = /**
         * @param {?} async
         * @param {?} updateLatestValue
         * @return {?}
         */
        function (async, updateLatestValue) {
            return async.subscribe({
                next: updateLatestValue,
                error: (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    throw e;
                }),
            });
        };
        /**
         * @param {?} subscription
         * @return {?}
         */
        ObservableStrategy.prototype.dispose = /**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) {
            subscription.unsubscribe();
        };
        return ObservableStrategy;
    }());
    var PromiseStrategy = /** @class */ (function () {
        function PromiseStrategy() {
        }
        /**
         * @param {?} async
         * @param {?} updateLatestValue
         * @return {?}
         */
        PromiseStrategy.prototype.createSubscription = /**
         * @param {?} async
         * @param {?} updateLatestValue
         * @return {?}
         */
        function (async, updateLatestValue) {
            return async.then(updateLatestValue, (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                throw e;
            }));
        };
        /**
         * @param {?} subscription
         * @return {?}
         */
        PromiseStrategy.prototype.dispose = /**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) { };
        return PromiseStrategy;
    }());
    /** @type {?} */
    var _promiseStrategy = new PromiseStrategy();
    /** @type {?} */
    var _observableStrategy = new ObservableStrategy();
    /**
     * \@ngModule PushPipeModule
     * \@description
     *
     * Unwraps a value from an asynchronous primitive.
     *
     * The `push` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
     * emitted. When a new value is emitted, the `push` pipe will run change detection and it works
     * even when `zone` has been disabled. When the component gets destroyed,
     * the `push` pipe unsubscribes automatically to avoid potential memory leaks.
     *
     */
    var PushPipe = /** @class */ (function () {
        function PushPipe(_ref) {
            this._ref = _ref;
            this._latestValue = null;
            this._latestReturnedValue = null;
            this._subscription = null;
            this._obj = null;
            this._strategy = (/** @type {?} */ (null));
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        PushPipe.prototype.transform = /**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            if (this._obj === null) {
                if (obj != null) {
                    this._subscribe(obj);
                }
                this._latestReturnedValue = this._latestValue;
                return this._latestValue;
            }
            if (obj !== this._obj) {
                this._dispose();
                return this.transform((/** @type {?} */ (obj)));
            }
            if (this._latestValue === this._latestReturnedValue) {
                return this._latestReturnedValue;
            }
            this._latestReturnedValue = this._latestValue;
            return core.WrappedValue.wrap(this._latestValue);
        };
        /**
         * @return {?}
         */
        PushPipe.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this._subscription !== null) {
                this._dispose();
            }
        };
        /**
         * @private
         * @param {?} obj
         * @return {?}
         */
        PushPipe.prototype._subscribe = /**
         * @private
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            var _this = this;
            this._obj = obj;
            this._strategy = this._selectStrategy(obj);
            this._subscription = this._strategy.createSubscription(obj, (/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return _this._updateLatestValue(obj, value); }));
        };
        /**
         * @private
         * @return {?}
         */
        PushPipe.prototype._dispose = /**
         * @private
         * @return {?}
         */
        function () {
            this._strategy.dispose((/** @type {?} */ (this._subscription)));
            this._latestValue = null;
            this._latestReturnedValue = null;
            this._subscription = null;
            this._obj = null;
        };
        /**
         * @private
         * @param {?} obj
         * @return {?}
         */
        PushPipe.prototype._selectStrategy = /**
         * @private
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            if (core["ɵisPromise"](obj)) {
                return _promiseStrategy;
            }
            if (core["ɵisObservable"](obj)) {
                return _observableStrategy;
            }
            throw invalidPipeArgumentError(PushPipe, obj);
        };
        /**
         * @private
         * @param {?} async
         * @param {?} value
         * @return {?}
         */
        PushPipe.prototype._updateLatestValue = /**
         * @private
         * @param {?} async
         * @param {?} value
         * @return {?}
         */
        function (async, value) {
            if (async === this._obj) {
                this._latestValue = value;
                this._ref.detectChanges();
            }
        };
        PushPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'push', pure: false },] }
        ];
        /** @nocollapse */
        PushPipe.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        return PushPipe;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        PushPipe.prototype._latestValue;
        /**
         * @type {?}
         * @private
         */
        PushPipe.prototype._latestReturnedValue;
        /**
         * @type {?}
         * @private
         */
        PushPipe.prototype._subscription;
        /**
         * @type {?}
         * @private
         */
        PushPipe.prototype._obj;
        /**
         * @type {?}
         * @private
         */
        PushPipe.prototype._strategy;
        /**
         * @type {?}
         * @private
         */
        PushPipe.prototype._ref;
    }
    var PushPipeModule = /** @class */ (function () {
        function PushPipeModule() {
        }
        PushPipeModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: [PushPipe],
                        declarations: [PushPipe],
                    },] }
        ];
        return PushPipeModule;
    }());

    exports.NgLetContext = NgLetContext;
    exports.NgLetDirective = NgLetDirective;
    exports.NgLetModule = NgLetModule;
    exports.PushPipe = PushPipe;
    exports.PushPipeModule = PushPipeModule;
    exports.RouterLinkMatch = RouterLinkMatch;
    exports.RouterLinkMatchModule = RouterLinkMatchModule;
    exports.invalidPipeArgumentError = invalidPipeArgumentError;
    exports.pluck = pluck;
    exports.untilDestroy = untilDestroy;
    exports.ɵdestroy$ = destroy$;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngrx-utils-store.umd.js.map
