/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/routerLinkMatch.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ContentChildren, Directive, Input, NgModule } from '@angular/core';
import { NavigationEnd, Router, RouterLink, RouterLinkWithHref, } from '@angular/router';
import { untilDestroy } from '../operators';
/**
 * @record
 */
export function MatchExp() { }
/**
 * This directive will give you ability to add a class to the element
 * when router url match a regular expression.
 * The syntax is same with ngClass but replace the true/false expression
 * with your string based regexp (like the string you pass to new RegExp(''))
 *
 * \@example
 * Example: active-class will be added to a tag when router URL
 * contains this segment: products/12345
 *
 * ```html
 * <a routerLink="/products"
 *  [routerLinkMatch]="{
 *    "active-class": "products/\\d+"
 *  }"></a>
 * ```
 */
export class RouterLinkMatch {
    /**
     * @param {?} router
     * @param {?} _renderer
     * @param {?} _ngEl
     */
    constructor(router, _renderer, _ngEl) {
        this.router = router;
        this._renderer = _renderer;
        this._ngEl = _ngEl;
        router.events.pipe(untilDestroy(this)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e instanceof NavigationEnd) {
                this._curRoute = ((/** @type {?} */ (e))).urlAfterRedirects;
                this._update();
            }
        }));
    }
    /**
     * @param {?} matchExp
     * @return {?}
     */
    set routerLinkMatch(matchExp) {
        if (matchExp && typeof matchExp === 'object') {
            this._matchExp = matchExp;
        }
        else {
            throw new TypeError(`Unexpected type '${typeof matchExp}' of value for ` +
                `input of routerLinkMatch directive, expected 'object'`);
        }
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this._update();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.links.changes.pipe(untilDestroy(this)).subscribe((/**
         * @return {?}
         */
        () => this._update()));
        this.linksWithHrefs.changes
            .pipe(untilDestroy(this))
            .subscribe((/**
         * @return {?}
         */
        () => this._update()));
        this._update();
    }
    /**
     * @private
     * @return {?}
     */
    _update() {
        if (!this.links || !this.linksWithHrefs || !this.router.navigated) {
            return;
        }
        /**
         * This a way of causing something to happen in the next micro-task / during a new round
         * of change detection.
         */
        Promise.resolve().then((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const matchExp = this._matchExp;
            for (const classes of Object.keys(matchExp)) {
                if (matchExp[classes] && typeof matchExp[classes] === 'string') {
                    /** @type {?} */
                    const regexp = new RegExp(matchExp[classes]);
                    if (this._curRoute.match(regexp)) {
                        this._toggleClass(classes, true);
                    }
                    else {
                        this._toggleClass(classes, false);
                    }
                }
            }
        }));
    }
    /**
     * @private
     * @param {?} classes
     * @param {?} enabled
     * @return {?}
     */
    _toggleClass(classes, enabled) {
        classes
            .split(/\s+/g)
            .filter((/**
         * @param {?} cls
         * @return {?}
         */
        (cls) => !!cls))
            .forEach((/**
         * @param {?} cls
         * @return {?}
         */
        (cls) => {
            if (enabled) {
                this._renderer.addClass(this._ngEl.nativeElement, cls);
            }
            else {
                this._renderer.removeClass(this._ngEl.nativeElement, cls);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
}
RouterLinkMatch.decorators = [
    { type: Directive, args: [{
                selector: '[routerLinkMatch]',
            },] }
];
/** @nocollapse */
RouterLinkMatch.ctorParameters = () => [
    { type: Router },
    { type: Renderer2 },
    { type: ElementRef }
];
RouterLinkMatch.propDecorators = {
    links: [{ type: ContentChildren, args: [RouterLink, { descendants: true },] }],
    linksWithHrefs: [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] }],
    routerLinkMatch: [{ type: Input, args: ['routerLinkMatch',] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._curRoute;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._matchExp;
    /** @type {?} */
    RouterLinkMatch.prototype.links;
    /** @type {?} */
    RouterLinkMatch.prototype.linksWithHrefs;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype.router;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._ngEl;
}
export class RouterLinkMatchModule {
}
RouterLinkMatchModule.decorators = [
    { type: NgModule, args: [{
                declarations: [RouterLinkMatch],
                exports: [RouterLinkMatch],
            },] }
];
//# sourceMappingURL=routerLinkMatch.js.map