/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/ngLet.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, Directive, Input, TemplateRef, ViewContainerRef, } from '@angular/core';
export class NgLetContext {
    constructor() {
        this.$implicit = null;
        this.ngLet = null;
    }
}
if (false) {
    /** @type {?} */
    NgLetContext.prototype.$implicit;
    /** @type {?} */
    NgLetContext.prototype.ngLet;
}
export class NgLetDirective {
    /**
     * @param {?} _vcr
     * @param {?} _templateRef
     */
    constructor(_vcr, _templateRef) {
        this._vcr = _vcr;
        this._templateRef = _templateRef;
        this._context = new NgLetContext();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ngLet(value) {
        this._context.$implicit = this._context.ngLet = value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._vcr.createEmbeddedView(this._templateRef, this._context);
    }
}
NgLetDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngLet]',
            },] }
];
/** @nocollapse */
NgLetDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef }
];
NgLetDirective.propDecorators = {
    ngLet: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgLetDirective.prototype._context;
    /**
     * @type {?}
     * @private
     */
    NgLetDirective.prototype._vcr;
    /**
     * @type {?}
     * @private
     */
    NgLetDirective.prototype._templateRef;
}
export class NgLetModule {
}
NgLetModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgLetDirective],
                exports: [NgLetDirective],
            },] }
];
//# sourceMappingURL=ngLet.js.map