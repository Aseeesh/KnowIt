{"version":3,"file":"push.js","sourceRoot":"ng://@ngrx-utils/store/","sources":["lib/pipes/push.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectorRef,\n  EventEmitter,\n  NgModule,\n  OnDestroy,\n  Pipe,\n  PipeTransform,\n  WrappedValue,\n  ɵisObservable as isObservable,\n  ɵisPromise as isPromise,\n} from '@angular/core';\nimport { Observable, SubscriptionLike } from 'rxjs';\nimport { Type, ɵstringify as stringify } from '@angular/core';\n\nexport function invalidPipeArgumentError(type: Type<any>, value: Object) {\n  return Error(`InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);\n}\n\ninterface SubscriptionStrategy {\n  createSubscription(\n    async: Observable<any> | Promise<any>,\n    updateLatestValue: any\n  ): SubscriptionLike | Promise<any>;\n  dispose(subscription: SubscriptionLike | Promise<any>): void;\n}\n\nclass ObservableStrategy implements SubscriptionStrategy {\n  createSubscription(\n    async: Observable<any>,\n    updateLatestValue: any\n  ): SubscriptionLike {\n    return async.subscribe({\n      next: updateLatestValue,\n      error: (e: any) => {\n        throw e;\n      },\n    });\n  }\n\n  dispose(subscription: SubscriptionLike): void {\n    subscription.unsubscribe();\n  }\n}\n\nclass PromiseStrategy implements SubscriptionStrategy {\n  createSubscription(\n    async: Promise<any>,\n    updateLatestValue: (v: any) => any\n  ): Promise<any> {\n    return async.then(updateLatestValue, (e) => {\n      throw e;\n    });\n  }\n\n  dispose(subscription: Promise<any>): void {}\n}\n\nconst _promiseStrategy = new PromiseStrategy();\nconst _observableStrategy = new ObservableStrategy();\n\n/**\n * @ngModule PushPipeModule\n * @description\n *\n * Unwraps a value from an asynchronous primitive.\n *\n * The `push` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has\n * emitted. When a new value is emitted, the `push` pipe will run change detection and it works\n * even when `zone` has been disabled. When the component gets destroyed,\n * the `push` pipe unsubscribes automatically to avoid potential memory leaks.\n *\n */\n@Pipe({ name: 'push', pure: false })\nexport class PushPipe implements PipeTransform, OnDestroy {\n  private _latestValue: any = null;\n  private _latestReturnedValue: any = null;\n\n  private _subscription: SubscriptionLike | Promise<any> | null = null;\n  private _obj:\n    | Observable<any>\n    | Promise<any>\n    | EventEmitter<any>\n    | null = null;\n  private _strategy: SubscriptionStrategy = null!;\n\n  constructor(private _ref: ChangeDetectorRef) {}\n\n  transform<T>(obj: null): null;\n  transform<T>(obj: undefined): undefined;\n  transform<T>(obj: Observable<T> | Promise<T> | null | undefined): T | null;\n  transform(obj: Observable<any> | Promise<any> | null | undefined): any {\n    if (this._obj === null) {\n      if (obj != null) {\n        this._subscribe(obj);\n      }\n      this._latestReturnedValue = this._latestValue;\n      return this._latestValue;\n    }\n\n    if (obj !== this._obj) {\n      this._dispose();\n      return this.transform(obj as any);\n    }\n\n    if (this._latestValue === this._latestReturnedValue) {\n      return this._latestReturnedValue;\n    }\n\n    this._latestReturnedValue = this._latestValue;\n    return WrappedValue.wrap(this._latestValue);\n  }\n\n  ngOnDestroy() {\n    if (this._subscription !== null) {\n      this._dispose();\n    }\n  }\n\n  private _subscribe(\n    obj: Observable<any> | Promise<any> | EventEmitter<any>\n  ): void {\n    this._obj = obj;\n    this._strategy = this._selectStrategy(obj);\n    this._subscription = this._strategy.createSubscription(\n      obj,\n      (value: Object) => this._updateLatestValue(obj, value)\n    );\n  }\n\n  private _dispose(): void {\n    this._strategy.dispose(this._subscription!);\n    this._latestValue = null;\n    this._latestReturnedValue = null;\n    this._subscription = null;\n    this._obj = null;\n  }\n\n  private _selectStrategy(\n    obj: Observable<any> | Promise<any> | EventEmitter<any>\n  ): any {\n    if (isPromise(obj)) {\n      return _promiseStrategy;\n    }\n\n    if (isObservable(obj)) {\n      return _observableStrategy;\n    }\n\n    throw invalidPipeArgumentError(PushPipe, obj);\n  }\n\n  private _updateLatestValue(async: any, value: Object): void {\n    if (async === this._obj) {\n      this._latestValue = value;\n      this._ref.detectChanges();\n    }\n  }\n}\n\n@NgModule({\n  exports: [PushPipe],\n  declarations: [PushPipe],\n})\nexport class PushPipeModule {}\n"]}