/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/routerLinkMatch.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { __values } from "tslib";
import { ContentChildren, Directive, Input, NgModule } from '@angular/core';
import { NavigationEnd, Router, RouterLink, RouterLinkWithHref, } from '@angular/router';
import { untilDestroy } from '../operators';
/**
 * @record
 */
export function MatchExp() { }
/**
 * This directive will give you ability to add a class to the element
 * when router url match a regular expression.
 * The syntax is same with ngClass but replace the true/false expression
 * with your string based regexp (like the string you pass to new RegExp(''))
 *
 * \@example
 * Example: active-class will be added to a tag when router URL
 * contains this segment: products/12345
 *
 * ```html
 * <a routerLink="/products"
 *  [routerLinkMatch]="{
 *    "active-class": "products/\\d+"
 *  }"></a>
 * ```
 */
var RouterLinkMatch = /** @class */ (function () {
    function RouterLinkMatch(router, _renderer, _ngEl) {
        var _this = this;
        this.router = router;
        this._renderer = _renderer;
        this._ngEl = _ngEl;
        router.events.pipe(untilDestroy(this)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e instanceof NavigationEnd) {
                _this._curRoute = ((/** @type {?} */ (e))).urlAfterRedirects;
                _this._update();
            }
        }));
    }
    Object.defineProperty(RouterLinkMatch.prototype, "routerLinkMatch", {
        set: /**
         * @param {?} matchExp
         * @return {?}
         */
        function (matchExp) {
            if (matchExp && typeof matchExp === 'object') {
                this._matchExp = matchExp;
            }
            else {
                throw new TypeError("Unexpected type '" + typeof matchExp + "' of value for " +
                    "input of routerLinkMatch directive, expected 'object'");
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RouterLinkMatch.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this._update();
    };
    /**
     * @return {?}
     */
    RouterLinkMatch.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.links.changes.pipe(untilDestroy(this)).subscribe((/**
         * @return {?}
         */
        function () { return _this._update(); }));
        this.linksWithHrefs.changes
            .pipe(untilDestroy(this))
            .subscribe((/**
         * @return {?}
         */
        function () { return _this._update(); }));
        this._update();
    };
    /**
     * @private
     * @return {?}
     */
    RouterLinkMatch.prototype._update = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.links || !this.linksWithHrefs || !this.router.navigated) {
            return;
        }
        /**
         * This a way of causing something to happen in the next micro-task / during a new round
         * of change detection.
         */
        Promise.resolve().then((/**
         * @return {?}
         */
        function () {
            var e_1, _a;
            /** @type {?} */
            var matchExp = _this._matchExp;
            try {
                for (var _b = __values(Object.keys(matchExp)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var classes = _c.value;
                    if (matchExp[classes] && typeof matchExp[classes] === 'string') {
                        /** @type {?} */
                        var regexp = new RegExp(matchExp[classes]);
                        if (_this._curRoute.match(regexp)) {
                            _this._toggleClass(classes, true);
                        }
                        else {
                            _this._toggleClass(classes, false);
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }));
    };
    /**
     * @private
     * @param {?} classes
     * @param {?} enabled
     * @return {?}
     */
    RouterLinkMatch.prototype._toggleClass = /**
     * @private
     * @param {?} classes
     * @param {?} enabled
     * @return {?}
     */
    function (classes, enabled) {
        var _this = this;
        classes
            .split(/\s+/g)
            .filter((/**
         * @param {?} cls
         * @return {?}
         */
        function (cls) { return !!cls; }))
            .forEach((/**
         * @param {?} cls
         * @return {?}
         */
        function (cls) {
            if (enabled) {
                _this._renderer.addClass(_this._ngEl.nativeElement, cls);
            }
            else {
                _this._renderer.removeClass(_this._ngEl.nativeElement, cls);
            }
        }));
    };
    /**
     * @return {?}
     */
    RouterLinkMatch.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () { };
    RouterLinkMatch.decorators = [
        { type: Directive, args: [{
                    selector: '[routerLinkMatch]',
                },] }
    ];
    /** @nocollapse */
    RouterLinkMatch.ctorParameters = function () { return [
        { type: Router },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    RouterLinkMatch.propDecorators = {
        links: [{ type: ContentChildren, args: [RouterLink, { descendants: true },] }],
        linksWithHrefs: [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] }],
        routerLinkMatch: [{ type: Input, args: ['routerLinkMatch',] }]
    };
    return RouterLinkMatch;
}());
export { RouterLinkMatch };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._curRoute;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._matchExp;
    /** @type {?} */
    RouterLinkMatch.prototype.links;
    /** @type {?} */
    RouterLinkMatch.prototype.linksWithHrefs;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype.router;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    RouterLinkMatch.prototype._ngEl;
}
var RouterLinkMatchModule = /** @class */ (function () {
    function RouterLinkMatchModule() {
    }
    RouterLinkMatchModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [RouterLinkMatch],
                    exports: [RouterLinkMatch],
                },] }
    ];
    return RouterLinkMatchModule;
}());
export { RouterLinkMatchModule };
//# sourceMappingURL=routerLinkMatch.js.map