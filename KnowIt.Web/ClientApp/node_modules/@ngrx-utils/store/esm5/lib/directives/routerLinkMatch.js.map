{"version":3,"file":"routerLinkMatch.js","sourceRoot":"ng://@ngrx-utils/store/","sources":["lib/directives/routerLinkMatch.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContentChildren, Directive, Input, NgModule } from '@angular/core';\nimport type {\n  QueryList,\n  AfterContentInit,\n  ElementRef,\n  OnChanges,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport {\n  NavigationEnd,\n  Router,\n  RouterLink,\n  RouterLinkWithHref,\n} from '@angular/router';\nimport { untilDestroy } from '../operators';\n\nexport interface MatchExp {\n  [classes: string]: string;\n}\n\n/**\n * This directive will give you ability to add a class to the element\n * when router url match a regular expression.\n * The syntax is same with ngClass but replace the true/false expression\n * with your string based regexp (like the string you pass to new RegExp(''))\n *\n * @example\n * Example: active-class will be added to a tag when router URL\n * contains this segment: products/12345\n *\n * ```html\n * <a routerLink=\"/products\"\n *  [routerLinkMatch]=\"{\n *    \"active-class\": \"products/\\\\d+\"\n *  }\"></a>\n * ```\n */\n@Directive({\n  selector: '[routerLinkMatch]',\n})\nexport class RouterLinkMatch implements OnDestroy, OnChanges, AfterContentInit {\n  private _curRoute: string;\n  private _matchExp: MatchExp;\n\n  @ContentChildren(RouterLink, { descendants: true })\n  links: QueryList<RouterLink>;\n\n  @ContentChildren(RouterLinkWithHref, { descendants: true })\n  linksWithHrefs: QueryList<RouterLinkWithHref>;\n\n  @Input('routerLinkMatch')\n  set routerLinkMatch(matchExp: MatchExp) {\n    if (matchExp && typeof matchExp === 'object') {\n      this._matchExp = matchExp;\n    } else {\n      throw new TypeError(\n        `Unexpected type '${typeof matchExp}' of value for ` +\n          `input of routerLinkMatch directive, expected 'object'`\n      );\n    }\n  }\n\n  constructor(\n    private router: Router,\n    private _renderer: Renderer2,\n    private _ngEl: ElementRef\n  ) {\n    router.events.pipe(untilDestroy(this)).subscribe((e) => {\n      if (e instanceof NavigationEnd) {\n        this._curRoute = (e as NavigationEnd).urlAfterRedirects;\n        this._update();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this._update();\n  }\n\n  ngAfterContentInit() {\n    this.links.changes.pipe(untilDestroy(this)).subscribe(() => this._update());\n    this.linksWithHrefs.changes\n      .pipe(untilDestroy(this))\n      .subscribe(() => this._update());\n    this._update();\n  }\n\n  private _update(): void {\n    if (!this.links || !this.linksWithHrefs || !this.router.navigated) {\n      return;\n    }\n\n    /**\n     * This a way of causing something to happen in the next micro-task / during a new round\n     * of change detection.\n     */\n    Promise.resolve().then(() => {\n      const matchExp = this._matchExp;\n\n      for (const classes of Object.keys(matchExp)) {\n        if (matchExp[classes] && typeof matchExp[classes] === 'string') {\n          const regexp = new RegExp(matchExp[classes]);\n          if (this._curRoute.match(regexp)) {\n            this._toggleClass(classes, true);\n          } else {\n            this._toggleClass(classes, false);\n          }\n        }\n      }\n    });\n  }\n\n  private _toggleClass(classes: string, enabled: boolean): void {\n    classes\n      .split(/\\s+/g)\n      .filter((cls) => !!cls)\n      .forEach((cls) => {\n        if (enabled) {\n          this._renderer.addClass(this._ngEl.nativeElement, cls);\n        } else {\n          this._renderer.removeClass(this._ngEl.nativeElement, cls);\n        }\n      });\n  }\n\n  ngOnDestroy() {}\n}\n\n@NgModule({\n  declarations: [RouterLinkMatch],\n  exports: [RouterLinkMatch],\n})\nexport class RouterLinkMatchModule {}\n"]}